<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Category Management</title>
  
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
    :root{
      --sidebar-width: 260px;
      --navbar-height: 64px;
      --accent: #0d6efd;
      --muted: #6c757d;
    }

    html,body { height: 100%; margin: 0; font-family: "Segoe UI", system-ui, -apple-system, "Helvetica Neue", Arial; background: #f8f9fa; }

    /* NAVBAR (light green) */

    .topbar {
      height: var(--navbar-height);
      background: #7dd170; /* light green */
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 16px;
      position: fixed;
      left: var(--sidebar-width);
      right: 0;
      top: 0;
      z-index: 1100;
      box-shadow: 0 2px 6px rgba(0,0,0,0.08);
      transition: left .25s ease;
    
    }

     
    .nav-actions { display: flex; align-items: center; gap: 15px; }
    .nav-icon { cursor: pointer; font-size: 1.2rem; position: relative; }
    .icon-badge::after { content: attr(data-count); position: absolute; top: -6px; right: -8px; background: red; color: white; font-size: 0.7rem; padding: 2px 5px; border-radius: 50%; display: none; }
    .icon-badge[data-count]:not([data-count="0"])::after { display: inline-block; }
    /* brand */
    .brand {
      font-weight: 700;
      color: #134611;
    }

    /* navbar right icons spacing & style */
    .nav-actions {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .nav-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 8px;
      margin-left: 8px;
      border-radius: 8px;
      cursor: pointer;
      color: #13340f;
      transition: background .2s, transform .12s;
    }
    .nav-icon:hover { background: rgba(0,0,0,0.06); transform: translateY(-1px); }
    .nav-icon .bi { font-size: 1.15rem; }

    /* small badge for counts (optional style) */
    .icon-badge {
      position: relative;
    }
    .icon-badge .badge {
      position: absolute;
      top: -6px;
      right: -6px;
      font-size: 0.6rem;
    }

    /* layout: sidebar + content */
    .layout {
      display: flex;
      min-height: 100vh;
    }

    /* Sidebar (light) */
    .sidebar {
      width: var(--sidebar-width);
      background: #f1f5f2;
      padding: 18px 12px;
      padding-top: calc(var(--navbar-height) + 14px); /* start under navbar */
      position: fixed;
      top: 0;
      left: 0;
      bottom: 0;
      overflow-y: auto;
      box-shadow: 2px 0 6px rgba(0,0,0,0.04);
      transition: transform .28s ease;
      z-index: 1050;
    }
    .sidebar.collapsed { transform: translateX(-110%); }

    .sidebar .nav-section { margin-bottom: 6px; }
    .sidebar .nav-link {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 8px;
      padding: 9px 10px;
      color: #213426;
      border-radius: 8px;
      text-decoration: none;
      margin-bottom: 4px;
      transition: background .18s;
    }
    .sidebar .nav-link:hover { background: #e6f0e6; color: orange; }

    .sidebar .nav-left { display: flex; gap: 10px; align-items: center; }
    .sidebar .nav-left .bi { font-size: 1.05rem; color: var(--accent); }

    /* submenu slide (animated) */
    .submenu {
      max-height: 0;
      overflow: hidden;
      transition: max-height .32s ease, padding .2s ease;
      padding-left: 36px;
    }
    .submenu.show {
      max-height: 420px; /* enough room */
      padding-top: 8px;
      padding-bottom: 8px;
    }
    .submenu a {
      display:block;
      padding:8px 12px;
      text-decoration:none;
      color:#183f28;
      border-radius:6px;
      margin-bottom:4px;
    }
    .submenu a:hover { background:#e6f0e6; color:orange; }

    /* main content area */
    .content {
      margin-left: var(--sidebar-width);
      margin-top: var(--navbar-height);
      padding: 22px;
      flex: 1;
      transition: margin-left .28s ease;
    }
    .sidebar.collapsed ~ .content {
      margin-left: 0;
    }
    .sidebar.collapsed ~ .topbar { left: 0; }

    /* cards grid: 3 on top, 4 on next row */
    .cards-top {
      display: grid;
      grid-template-columns: repeat(3,1fr);
      gap: 16px;
      margin-bottom: 18px;
    }
    .cards-bottom {
      display: grid;
      grid-template-columns: repeat(4,1fr);
      gap: 16px;
      margin-bottom: 20px;
       
    }

    .stat-card {
     
      border-radius: 12px;
      padding: 18px;
      box-shadow: 0 6px 18px rgba(0,0,0,0.04);
      display:flex;
      align-items:center;
      gap: 12px;
      cursor:pointer;
      transition: transform .16s ease, box-shadow .16s;
       color: white;
    }
    .stat-card:hover { transform: translateY(-6px); box-shadow: 0 12px 28px rgba(0,0,0,0.06); }
    .stat-icon {
      width:56px;height:56px;border-radius:10px;
      display:flex;align-items:center;justify-content:center;font-size:1.6rem;color:white;
      flex-shrink:0;
    }
    .stat-body { flex:1; }
    .stat-title { font-size:0.85rem;color:var(--muted); margin:0; }
    .stat-value { font-size:1.55rem;font-weight:700;margin:4px 0 0;color:#222; }

    /* colored icon backgrounds */
    .c-admin{background: linear-gradient(135deg,#3b82f6,#2563eb);}  /* blue */
    .c-client{background: linear-gradient(135deg,#10b981,#059669);} /* green */
    .c-supplier{background: linear-gradient(135deg,#fb923c,#f97316);}/* orange */
    .c-open{background: linear-gradient(135deg,#06b6d4,#0891b2);}    /* teal */
    .c-closed{background: linear-gradient(135deg,#94a3b8,#6b7280);}  /* gray */
    .c-applied{background: linear-gradient(135deg,#f59e0b,#d97706);} /* amber */
    .c-approved{background: linear-gradient(135deg,#7c3aed,#6d28d9);} /* purple */

    /* Open catego table */
    .table-card {
      margin-top: 8px;
      background: white;
      padding: 14px;
      border-radius: 10px;
      box-shadow: 0 6px 18px rgba(0,0,0,0.03);
    }

    /* popups anchored to icons */
    .floating-popup {
      position: absolute;
      width: 260px;
      max-width: 40vw;
      background: white;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.12);
      padding: 10px;
      z-index: 1200;
      display: none;
    }
    .floating-popup .item {
      display:flex; gap:10px; align-items:center; padding:8px 6px; border-bottom:1px solid #f0f0f0;
    }
    .floating-popup .item:last-child{border-bottom:none;}
    .floating-popup .item .bi { font-size:1.05rem; color:var(--accent); width:28px; text-align:center; }
    .floating-popup h6{margin:0 0 8px 0;font-size:0.95rem;color:var(--accent);}

    /* Responsive */
    @media (max-width: 991px) {
      .cards-top { grid-template-columns: repeat(2,1fr); }
      .cards-bottom { grid-template-columns: repeat(2,1fr); }
    }
    @media (max-width: 768px) {
      .topbar { left: 0; padding: 0 10px; }
      .sidebar { transform: translateX(-110%); position: fixed; z-index:1300; }
      .sidebar.visible { transform: translateX(0); }
      .content { margin-left: 0; padding: 14px; margin-top: var(--navbar-height); }
      .cards-top { grid-template-columns: 1fr; }
      .cards-bottom { grid-template-columns: repeat(2,1fr); }
    }
    /* --- Top Navbar Styling --- */
.navbar-custom {
  margin-left: 260px; /* keeps space for sidebar */
  background: #90ee90; /* light green */
  padding: 10px 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: sticky;
  top: 0;
  z-index: 1000;
}

.navbar-custom .left span {
  font-size: 1.3rem;
  font-weight: bold;
  color: #1e1e2f;
}

.navbar-custom .right {
  display: flex;
  align-items: center;
  gap: 25px; /* spacing between icons */
}

.icon-wrapper {
  position: relative;
  cursor: pointer;
}

.icon-wrapper i {
  font-size: 1.4rem;
  color: #1e1e2f;
}

.icon-wrapper .badge {
  position: absolute;
  top: -5px;
  right: -10px;
  background: red;
  color: #fff;
  font-size: 0.7rem;
  border-radius: 50%;
  padding: 3px 6px;
}

/* Dropdown menus for email, sms, notification */
.navbar-custom .dropdown-menu {
  min-width: 250px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  border-radius: 8px;
  border: none;
}

.navbar-custom .dropdown-menu .dropdown-item {
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  gap: 8px;
}

.navbar-custom .dropdown-menu .dropdown-item i {
  font-size: 1rem;
  color: #0d6efd;
}

/* Profile dropdown */
.navbar-custom .dropdown-menu .dropdown-item.text-danger {
  color: #dc3545 !important;
}

.navbar-custom .dropdown-menu .dropdown-item.text-danger:hover {
  background: #f8d7da;
  color: #a71d2a !important;
}

/* Responsive tweaks */
@media (max-width: 768px) {
  .navbar-custom {
    margin-left: 0;
    flex-wrap: wrap;
  }
  .navbar-custom .left {
    width: 100%;
    margin-bottom: 10px;
  }
  .navbar-custom .right {
    width: 100%;
    justify-content: flex-end;
  }
}
  </style>
</head>
<body class="bg-light">


<div class="content">
       <!-- Sidebar (light) -->
   <%- include('partials/sidebar') %>

    <!-- Top Navbar (light green) -->
     <%- include('partials/topbar') %>
  <h2 class="mb-4 text-center text-success">Category Management</h2>
<!-- Main Navigation Tabs -->
<ul class="nav nav-pills mb-3 justify-content-center" id="adminTabs" role="tablist">
  <li class="nav-item">
    <button class="nav-link active" id="job-tab" data-bs-toggle="pill" data-bs-target="#job" type="button" role="tab" aria-controls="job" aria-selected="true">
      New Job
    </button>
  </li>
  <li class="nav-item">
    <button class="nav-link" id="form-tab" data-bs-toggle="pill" data-bs-target="#form" type="button" role="tab" aria-controls="form" aria-selected="false">
      Create Category
    </button>
  </li>
  <li class="nav-item">
    <button class="nav-link" id="upload-tab" data-bs-toggle="pill" data-bs-target="#upload" type="button" role="tab" aria-controls="upload" aria-selected="false">
      Multiple Upload
    </button>
  </li>
  <li class="nav-item">
    <button class="nav-link" id="communication-tab" data-bs-toggle="pill" data-bs-target="#communication" type="button" role="tab" aria-controls="communication" aria-selected="false">
      Questionnaire
    </button>
  </li>
  <li class="nav-item">
    <button class="nav-link" id="reporting-tab" data-bs-toggle="pill" data-bs-target="#reporting" type="button" role="tab" aria-controls="reporting" aria-selected="false">
      View Category List
    </button>
  </li>
</ul>

<script>
  // Keep only one tab active (blue) at a time
  const tabButtons = document.querySelectorAll('#adminTabs .nav-link');

  tabButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      tabButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
    });
  });
</script>


  <!-- Tab Content -->
  <div class="tab-content" id="adminTabsContent">
<!-- New Job Tab -->
  <div class="tab-pane fade show active" id="newJob">
    <h5 class="text-success mb-3">Create New Job</h5>
    <form action="/create_job" method="post">
      <div class="mb-3">
        <label class="form-label">Client</label>
        <select name="client" class="form-select">
          <option value="">Select Client</option>
          <option value="County Government">County Government</option>
          <option value="Ministry">Ministry</option>
          <option value="Private Company">Private Company</option>
          <option value="NGO">NGO</option>
        </select>
      </div>

      <div class="mb-3">
        <label class="form-label">Bid Title</label>
        <input type="text" name="bid_title" class="form-control" placeholder="Enter bid title" required>
      </div>

      <div class="row">
        <div class="col-md-6 mb-3">
          <label class="form-label">Start Date & Time</label>
          <input type="datetime-local" name="start_datetime" class="form-control" required>
        </div>
        <div class="col-md-6 mb-3">
          <label class="form-label">Closing Date & Time</label>
          <input type="datetime-local" name="closing_datetime" class="form-control" required>
        </div>
      </div>

      <div class="mb-3">
        <label class="form-label">Eligibility Criteria</label>
        <select name="eligibility[]" class="form-select" >
          <option value="All">All</option>
          <option value="Youth">Youth</option>
          <option value="Women">Women</option>
          <option value="PWDs">PWDs</option>
        </select>
        <small class="text-muted">Hold Ctrl (Cmd on Mac) to select multiple options</small>
      </div>

      <button type="submit" class="btn btn-primary">Create Job</button>
    </form>
  </div>
    <!-- Create Category -->
    <div class="tab-pane fade show active" id="form" role="tabpanel" aria-labelledby="form-tab">
      <div class="card p-4 shadow-sm">
        <h5 class="section-title mb-3">Create Category</h5>
        <form method="post" action="/add_category">
          <div class="mb-3">
            <label class="form-label">Category Number</label>
            <input type="text" class="form-control" name="category_no" placeholder="Enter category number">
          </div>
           <div class="mb-3">
            <label class="form-label">Category Name</label>
            <input type="text" class="form-control" name="category_name" placeholder="Enter category name">
          </div>
           <div class="mb-3">
            <label class="form-label">Price</label>
            <input type="number" class="form-control" name="price" placeholder="Enter category name">
          </div>
          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea class="form-control" name="description" placeholder="Enter category description"></textarea>
          </div>
          <div class="d-flex justify-content-end gap-2">
        <button type="button" class="btn btn-success" id="saveJobBtn">Save</button>
        <button type="button" class="btn btn-primary next-tab" id="nextTabBtn">Next</button>
      </div>
        </form>
      </div>
    </div>

    <!-- Multiple Upload -->
    <div class="tab-pane fade" id="upload" role="tabpanel" aria-labelledby="upload-tab">
      <div class="card p-4 shadow-sm">
        <h5 class="section-title mb-3">Multiple Category Upload</h5>
        <form>
          <div class="mb-3">
            <label class="form-label">Upload File</label>
            <input type="file" class="form-control">
          </div>
            <div class="d-flex justify-content-end gap-2">
        <button type="button" class="btn btn-success" id="saveJobBtn">upload</button>
        <button type="button" class="btn btn-primary next-tab" id="nextTabBtn">Next</button>
      </div>
        </form>
      </div>
    </div>

    <!-- Questionnaire -->
    <div class="tab-pane fade" id="communication" role="tabpanel" aria-labelledby="communication-tab">
      <div class="card p-4 shadow-sm">
        <h5 class="section-title mb-3">Questionnaire</h5>
          <h2>Upload File (CSV)</h2>
  <input type="file" id="fileInput" accept=".xlsx" />

  <h3>Generated Questionnaire</h3>
  <form id="questionnaire"></form>

  <!-- <button id="previewBtn">Preview</button> -->
   <div class="d-flex justify-content-end gap-2">
        <button type="button" class="btn btn-success" id="previewBtn">Preview</button>
        <button type="button" class="btn btn-primary next-tab" id="nextTabBtn">Next</button>
      </div>
  <div id="previewArea"></div>
   
      </div>
    </div>
<script>
document.querySelectorAll('.next-tab').forEach(btn => {
  btn.addEventListener('click', () => {
    // Find current active tab
    const activeTab = document.querySelector('#adminTabs .nav-link.active');
    const nextTabItem = activeTab.parentElement.nextElementSibling;
    
    if (nextTabItem) {
      const nextTabBtn = nextTabItem.querySelector('.nav-link');
      const nextTab = new bootstrap.Tab(nextTabBtn);
      nextTab.show();
    } else {
      alert("You’ve reached the last section!");
    }
  });
});
</script>
<!-- next button -->
 <script>
document.querySelectorAll('.next-tab').forEach(btn => {
  btn.addEventListener('click', () => {
    // Find current active tab
    const activeTab = document.querySelector('#adminTabs .nav-link.active');
    const nextTabItem = activeTab.parentElement.nextElementSibling;
    
    if (nextTabItem) {
      const nextTabBtn = nextTabItem.querySelector('.nav-link');
      const nextTab = new bootstrap.Tab(nextTabBtn);
      nextTab.show();
    } else {
      alert("You’ve reached the last section!");
    }
  });
});
</script>

<script>
  // Handle Save Job
  document.getElementById("saveJobBtn").addEventListener("click", function () {
    const form = document.getElementById("newJobForm");
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }
    const formData = Object.fromEntries(new FormData(form).entries());
    console.log("Job saved:", formData);
    alert("Job saved successfully!");
  });

  // Move to Create Category tab after saving
  document.getElementById("nextTabBtn").addEventListener("click", function () {
    const nextTab = document.querySelector('#form-tab');
    const tabInstance = new bootstrap.Tab(nextTab);
    tabInstance.show();
  });
</script>


<script>
  // Show modal when New Job tab is clicked
  document.getElementById("job-tab").addEventListener("click", function (e) {
    e.preventDefault();
    const modal = new bootstrap.Modal(document.getElementById("newJobModal"));
    modal.show();
  });

  // Handle Save button
  document.getElementById("saveJobBtn").addEventListener("click", function () {
    const form = document.getElementById("newJobForm");
    if (!form.checkValidity()) {
      form.reportValidity();
      return;
    }
    // Example: collect form data
    const formData = Object.fromEntries(new FormData(form).entries());
    console.log("Job saved:", formData);

    alert("Job saved successfully!");
  });

  // Handle Next button — moves to Create Category tab
  document.getElementById("nextTabBtn").addEventListener("click", function () {
    const nextTab = document.querySelector('#form-tab');
    const tabInstance = new bootstrap.Tab(nextTab);
    tabInstance.show();

    const modalEl = document.getElementById("newJobModal");
    const modalInstance = bootstrap.Modal.getInstance(modalEl);
    modalInstance.hide();
  });
</script>

    <!-- View Category List -->

    <div class="tab-pane fade" id="reporting" role="tabpanel" aria-labelledby="reporting-tab">
      <div class="table-card">
        <div class="table-responsive">
          <table class="table table-striped align-middle" id="rfxTable">
            <thead >
              <tr>
                <th style="color:#008000;">Code</th>
                <th style="color:#008000;">Name</th>
                <th style="color:#008000;">Price</th>
                <th style="color:#008000;">Description</th>
                <th style="color:#008000;">Date</th>
             
                <th class="text-end" style="color:#008000;" colspan="3">Actions</th>
              </tr>
            </thead>
            <tbody>
      
<tbody>
  <% if (catego && catego.length > 0) { %>
    <% catego.forEach(cat => { %>
      <tr>
        <td><%= cat.category_no %></td>
        <td><%= cat.category_name %></td>
        <td><%= cat.price%></td>
         <td><%= cat.description %></td>
       <td>
  <% if (cat.date) { %>
    <%= new Date(cat.date).toLocaleString('en-KE', { 
          dateStyle: 'medium', 
          timeStyle: 'short' 
        }) %>
  <% } else { %>
    N/A
  <% } %>
</td>

       <td class="text-end">
          <button class="btn btn-sm btn-outline-secondary me-1" onclick="openViewModal(this)"><i class="bi bi-eye"></i> View</button>
                  <button class="btn btn-sm btn-outline-primary me-1" onclick="openEditModal(this)"><i class="bi bi-pencil-square"></i> Edit</button>
                 
                  <button class="btn btn-sm btn-outline-danger" onclick="deleteRfx(this)"><i class="bi bi-trash"></i>Delete</button>
        </td>
      </tr>
    <% }) %>
  <% } else { %>
    <tr>
      <td colspan="6" class="text-center text-muted">No closed catego found</td>
    </tr>
  <% } %>
</tbody>

           

            </tbody>
          </table>
        </div>
      </div>

    </div>

  </div>
</div>

<!-- Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- Optional: Remember last active tab -->
<script>
  const adminTabs = document.querySelectorAll('#adminTabs button');
  adminTabs.forEach(tab => {
    tab.addEventListener('shown.bs.tab', e => {
      localStorage.setItem('activeTab', e.target.getAttribute('data-bs-target'));
    });
  });

  const activeTab = localStorage.getItem('activeTab');
  if (activeTab) {
    const someTab = document.querySelector(`#adminTabs button[data-bs-target="${activeTab}"]`);
    const tabInstance = new bootstrap.Tab(someTab);
    tabInstance.show();
  }
</script>
<!-- questionnair script -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script>
document.getElementById("fileInput").addEventListener("change", handleFile);

function cleanText(t) {
  if (!t) return "";
  // remove long underscore placeholders and trailing colons/extra spaces
  return t.replace(/[_\u2014\u2013]+/g, '')    // underscores and long dashes
          .replace(/:\s*$/g, '')              // trailing colon
          .replace(/\s{2,}/g, ' ')            // collapse multiple spaces
          .trim();
}

function handleFile(event) {
  const file = event.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function(e) {
    let rows = [];

    if (file.name.endsWith(".csv")) {
      const text = e.target.result;
      rows = text.replace(/\r\n/g, "\n").split("\n").map(r => r.split(","));
    } else {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: "array" });
      const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
      rows = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });
    }

    // Remove header row
    rows.shift();

    const questionnaire = document.getElementById("questionnaire");
    questionnaire.innerHTML = "";

    rows.forEach((row, index) => {
      if (!row || row.length < 8) return;

      let [
        section,
        questionId,
        questionTextRaw,
        answerType,
        mandatory,
        optionsOrRule,
        weight,
        attachmentRequired
      ] = row.map(v => String(v || ""));

      const questionText = questionTextRaw.trim();

      // Clean display text for normal questions
      const cleanedQuestionText = cleanText(questionText);

      let field = "";

      // Detect reference-style blocks (keywords are flexible)
      const isReferenceBlock =
        /reference/i.test(questionText) ||
        /organization name/i.test(questionText) ||
        /contact person/i.test(questionText);

      if (isReferenceBlock) {
        // Render clean input fields only (no underscore placeholders)
        field = `
          <div class="row mb-2">
            <div class="col-md-6">
              <label class="form-label">Organization Name</label>
              <input type="text" class="form-control" name="org_name_${index}" placeholder="Organization Name">
            </div>
            <div class="col-md-6">
              <label class="form-label">Contact Person</label>
              <input type="text" class="form-control" name="contact_person_${index}" placeholder="Contact Person">
            </div>
          </div>
          <div class="row mb-2">
            <div class="col-md-6">
              <label class="form-label">Designation/Position</label>
              <input type="text" class="form-control" name="designation_${index}" placeholder="Designation / Position">
            </div>
            <div class="col-md-6">
              <label class="form-label">Telephone Number</label>
              <input type="text" class="form-control" name="phone_${index}" placeholder="Telephone Number">
            </div>
          </div>
          <div class="row mb-2">
            <div class="col-md-6">
              <label class="form-label">Email Address</label>
              <input type="email" class="form-control" name="email_${index}" placeholder="Email Address">
            </div>
            <div class="col-md-6">
              <label class="form-label">Nature of Goods/Services Supplied</label>
              <input type="text" class="form-control" name="services_${index}" placeholder="Nature of Goods/Services Supplied">
            </div>
          </div>
          <div class="mb-2">
            <label class="form-label">Contract Value (approx.)</label>
            <input type="text" class="form-control" name="contract_value_${index}" placeholder="Contract Value (approx.)">
          </div>
        `;
      } else {
        // Normal question rendering (clean the question text for display)
        switch ((answerType || "").toLowerCase()) {
          case "text":
            field = `<textarea name="q${index}" class="form-control mb-2" placeholder="Enter answer"></textarea>`;
            break;
          case "number":
            field = `<input type="number" name="q${index}" class="form-control mb-2" placeholder="Enter number" />`;
            break;
          case "date":
            field = `<input type="date" name="q${index}" class="form-control mb-2" />`;
            break;
          case "pass/fail":
            field = `
              <select name="q${index}" class="form-control mb-2">
                <option value="">-- Select --</option>
                <option value="Pass">Pass</option>
                <option value="Fail">Fail</option>
              </select>`;
            break;
          case "file":
            field = `<input type="file" name="q${index}" accept="application/pdf" class="form-control mb-2" />
                     <small>FileType=PDF, MaxSize=1MB</small>`;
            break;
          default:
            if (optionsOrRule && optionsOrRule.includes("=")) {
              field = `<select name="q${index}" class="form-control mb-2">
                ${optionsOrRule.split(",").map(opt => {
                  const [label, val] = opt.split("=");
                  return `<option value="${val ? val.trim() : label.trim()}">${label.trim()}</option>`;
                }).join("")}
              </select>`;
            } else {
              field = `<input type="text" name="q${index}" class="form-control mb-2" placeholder="Enter answer" />`;
            }
        }
      }

      const requiredMark = (mandatory || "").toLowerCase() === "y" ? " <span style='color:red'>*</span>" : "";

      let attachmentField = "";
      if ((attachmentRequired || "").toLowerCase() === "y") {
        attachmentField = `
          <input type="file" name="attach${index}" accept="application/pdf" class="form-control mb-2" />
          <small>FileType=PDF, MaxSize=1MB</small>`;
      }

      // Only show the cleaned question text if it has non-empty content and it's not redundant
      const showQuestionHeading = !isReferenceBlock && cleanedQuestionText.length > 0;

      questionnaire.innerHTML += `
        <div class="quiz-card mb-3 p-2 border rounded">
          <h5>${section ? section : ''}${section && questionId ? ' - ' : ''}${questionId ? questionId : ''}</h5>
          ${showQuestionHeading ? `<p><strong>${cleanedQuestionText}</strong>${requiredMark}</p>` : ''}
          ${field}
          ${attachmentField}
          <small><em>Weight: ${weight ? weight : ''}</em></small>
        </div>
      `;
    });
  };

  // Reader mode
  if (file.name.endsWith(".csv")) {
    reader.readAsText(file);
  } else {
    reader.readAsArrayBuffer(file);
  }
}

// Preview entered answers
document.getElementById("previewBtn").addEventListener("click", function(e) {
  e.preventDefault();
  const form = document.getElementById("questionnaire");
  if (!form) return;
  const formData = new FormData(form);
  let preview = "<h3>Preview Responses</h3><ul>";
  for (let [key, value] of formData.entries()) {
    preview += `<li>${key}: ${value instanceof File ? value.name : value}</li>`;
  }
  preview += "</ul>";
  document.getElementById("previewArea").innerHTML = preview;
});
</script>




 <script>
    // Sidebar submenu toggles (preserve initial markup, only enhance)
    document.querySelectorAll('[data-toggle="submenu"]').forEach(btn=>{
      btn.addEventListener('click', function(e){
        e.preventDefault();
        const target = this.getAttribute('data-target');
        const el = document.getElementById(target);
        if (!el) return;
        el.classList.toggle('show');
        // rotate plus icon visual: toggle caret or plus (optional)
        const icon = this.querySelector('.bi');
        if (icon) icon.classList.toggle('bi-rotate-90');
      });
    });

    // Mobile hamburger toggles the sidebar visibility
    const hamburger = document.getElementById('hamburgerBtn');
    const sidebar = document.getElementById('sidebar');
    const topbar = document.getElementById('topbar');
    const content = document.getElementById('content');

    hamburger && hamburger.addEventListener('click', ()=> {
      sidebar.classList.toggle('visible'); // CSS handles transform for small screens
    });

    // Global: close any open popup
    function closeAllFloating(){
      document.querySelectorAll('.floating-popup, .floating-popup').forEach(el => el.style.display = 'none');
      document.getElementById('profileMenu').style.display = 'none';
    }

    // Position and show a floating popup next to the clicked icon
    function showPopup(popupEl, triggerEl){
      closeAllFloating();
      const rect = triggerEl.getBoundingClientRect();
      const popup = popupEl;
      // place above or below depending on available space
      const scrollY = window.scrollY || window.pageYOffset;
      let top = rect.bottom + scrollY + 8;
      let left = Math.min(window.innerWidth - popup.offsetWidth - 12, rect.left + window.scrollX - popup.offsetWidth/2 + rect.width/2);
      popup.style.top = top + 'px';
      popup.style.left = left + 'px';
      popup.style.display = 'block';
    }

    // tidy helper to find elements
    const emailIcon = document.getElementById('emailIcon');
    const smsIcon = document.getElementById('smsIcon');
    const notifIcon = document.getElementById('notifIcon');
    const emailPopup = document.getElementById('emailPopup');
    const smsPopup = document.getElementById('smsPopup');
    const notifPopup = document.getElementById('notifPopup');
    const profileIcon = document.getElementById('profileIcon');
    const profileMenu = document.getElementById('profileMenu');

    // toggle handlers
    emailIcon && emailIcon.addEventListener('click', (e)=> {
      showPopup(emailPopup, emailIcon);
      e.stopPropagation();
    });
    smsIcon && smsIcon.addEventListener('click', (e)=> {
      showPopup(smsPopup, smsIcon);
      e.stopPropagation();
    });
    notifIcon && notifIcon.addEventListener('click', (e)=> {
      showPopup(notifPopup, notifIcon);
      e.stopPropagation();
    });

    profileIcon && profileIcon.addEventListener('click', (e)=>{
      // position profile menu under the icon (right corner)
      closeAllFloating();
      const rect = profileIcon.getBoundingClientRect();
      const scrollY = window.scrollY || window.pageYOffset;
      profileMenu.style.top = rect.bottom + scrollY + 8 + 'px';
      profileMenu.style.left = (rect.left + rect.width/2 - profileMenu.offsetWidth/2) + 'px';
      profileMenu.style.display = 'block';
      e.stopPropagation();
    });

    // click outside closes popups
    document.addEventListener('click', function(e){
      // if click inside any floating popup or icon, ignore
      const targets = [emailPopup, smsPopup, notifPopup, profileMenu];
      if (!e.target.closest('.nav-icon') && !targets.some(t => t && t.contains(e.target))) {
        closeAllFloating();
      }
    });

    // Card modal: show appropriate content when a card is clicked
    document.querySelectorAll('.stat-card').forEach(card=>{
      card.addEventListener('click', function(){
        const title = this.getAttribute('data-card') || 'Details';
        const titleEl = document.getElementById('detailModalTitle');
        const bodyEl = document.getElementById('detailModalBody');
        titleEl.textContent = title;
        bodyEl.innerHTML = `<strong>${title}</strong><br/>This is demo content for <em>${title}</em>. You can wire this to real data or link the 'View All' to the relevant page.`;
        // open bootstrap modal programmatically
        const modal = new bootstrap.Modal(document.getElementById('detailModal'));
        modal.show();
      });
    });

    // close popups on resize to avoid misplaced popup
    window.addEventListener('resize', closeAllFloating);

  </script>



<!-- <script>
  document.getElementById("fileInput").addEventListener("change", handleFile);

  function handleFile(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
      let rows = [];

      if (file.name.endsWith(".csv")) {
        // Parse CSV
        const text = e.target.result;
        rows = text.replace(/\r\n/g, "\n").split("\n").map(r => r.split(","));
      } else {
        // Parse Excel
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: "array" });
        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
        rows = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });
      }

      // Remove header row
      rows.shift();

      const questionnaire = document.getElementById("questionnaire");
      questionnaire.innerHTML = "";

      rows.forEach((row, index) => {
        if (row.length < 4) return;
        const [section, quiz, points, fileTypeRaw] = row.map(v => String(v).trim());
        const fileType = fileTypeRaw.toLowerCase();

        let field = "";
        if (fileType === "text") {
          field = `<textarea name="q${index}" placeholder="Answer here" class="form-control mb-2"></textarea>`;
        } else if (fileType === "file") {
          field = `<input type="file" name="q${index}" class="form-control mb-2" />`;
        } else if (fileType === "number") {
          field = `<input type="number" name="q${index}" class="form-control mb-2" />`;
        } else if (fileType === "date") {
          field = `<input type="date" name="q${index}" class="form-control mb-2" />`;
        } else if (fileType === "email") {
          field = `<input type="email" name="q${index}" class="form-control mb-2" />`;
        } else {
          // fallback
          field = `<input type="text" name="q${index}" class="form-control mb-2" />`;
        }

        questionnaire.innerHTML += `
          <div class="quiz-card mb-3 p-2 border rounded">
            <h4>${section} - ${quiz} (${points} points)</h4>
            ${field}
          </div>
        `;
      });
    };

    // Use correct reader mode
    if (file.name.endsWith(".csv")) {
      reader.readAsText(file);
    } else {
      reader.readAsArrayBuffer(file);
    }
  }

  // Preview entered answers
  document.getElementById("previewBtn").addEventListener("click", function(e) {
    e.preventDefault();
    const formData = new FormData(document.getElementById("questionnaire"));
    let preview = "<h3>Preview Responses</h3><ul>";
    for (let [key, value] of formData.entries()) {
      preview += `<li>${key}: ${value instanceof File ? value.name : value}</li>`;
    }
    preview += "</ul>";
    document.getElementById("previewArea").innerHTML = preview;
  });
</script> -->
</body>
</html>
